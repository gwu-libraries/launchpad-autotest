This repository contains casperjs scripts used to test the GW Libraries' Launchpad web application
(https://github.com/gwu-libraries/launchpad). In addition to the .js files, a configuration file and a few Shell scripts are provided to call the scripts.

1. Install phantomjs
   Get version 1.9

sudo apt-get update
sudo apt-get install build-essential chrpath git-core libssl-dev libfontconfig1-dev
git clone git://github.com/ariya/phantomjs.git
cd phantomjs
git checkout 1.9
./build.sh

- - - - build will take a few minutes - - - - - - - - - - - - - - - - 

2. Identify phantomjs

   a) After the build completes, run command 
      This command may locate it. 
 
      $which phantomjs

      if not, find where phantom_v1.9/phantomjs/bin/phantomjs is located.

   b) Edit your .profile file, add the path to phantomjs
      eg.,
	
      PATH=$PATH:/home/cummings/projects/phantom/phantom_v1.9/phantomjs/bin

      Save changes to .profile

   c) exit
      logon again


3. Install casperjs

   Install casperjs (Version 1.1.x) by following the instructions posted here:

   http://http://docs.casperjs.org/en/latest/installation.html#installing-from-git

4. Download the files to your local repository

   Verify you have files config_template, issue.sh, errorlists.sh, and some files with
   the extension .js named after an issue number (eg., 248.js, 385.js). There should also be a directory marc-tests containing more scripts named after a MARC tag (eg., marc-245.js)

5. Copy the file named config_template to config.js

   a) Edit config.js; Set the URL prefix to the appropriate server.
   b) Save changes to config.js 

6. Run a test using the shell script issue.sh
   The script requires the name of a script file, such as 248.sh

   	$sh issue.sh 248

	Test results should appear on screen
	The results will indicate if there are syntax errors in script. Otherwise,
	the results indicate whether the test status is PASS or FAIL. 
	A log file of test results will be generated. 
	The log file will be named log-NNN.xml where NNN is the issue number.

.. To run multiple tests use one of the shell scripts that call multiple
   issues. Examples
	
	to run tests associated with m14_001:    $ sh sh m14-001.sh
	to run tests associated with all m14:    $ sh m14.sh 

   Alternately, create your own script to call as set of scripts.


.. Run the script errorslist.sh to identify any xml file that contains failures.
   Optionally, put the xml log files somewhere where they may be parsed and or displayed.

	$sh errorslist.sh

.. A subdirectory, marc-tests, contains a set of scripts that test a MARC TAG -- rather 
   than an issue. There is a different script to invoke the test, marc-test.sh and
   the scripts have the naming convention marc-NNN.js where NNN is the MARC TAG
   (eg. sh marc-test.sh marc-700). The script expects to find the config.js file
   in parent directory.

   The marc-NNN.js scripts basically duplicate the tests in lp/ui/tests/marc_test.py and
   automate the tests on wiki page https://github.com/gwu-libraries/launchpad/wiki/MARC-Extraction

   To run all the MARC tag tests, run the marc-all.sh script

	$sh marc-all.sh
.. To create new scripts, you may want to begin by making a copy of the template.txt file

.. Documentation on the casperjs test suite API is available at

   http://http://docs.casperjs.org/en/latest/modules/tester.html

